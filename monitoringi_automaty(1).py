# -*- coding: utf-8 -*-
"""Soczyste rabaty.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bfU5lwdNa2GOPWmQ9-URaf30VnlBzQC0
"""

#importowanie potrzebnych bibliotek
import os
import openpyxl
import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
import plotly.express as px
import plotly.graph_objects as go
from urllib.request import urlopen
import json
import io
import datetime
import re



st.set_page_config(page_title='Monitoringi AUTOMATY', layout='wide')


sekcja = st.sidebar.radio(
    'Wybierz monitoring:',
    ('Cera+ Panthenol','Cykl Q3','Cykl Q4','Helituspan','Meloxicam','Plastry','Standy','Standy wrzesień-marzec','Synosept','Ziołowy sztos')
 )

tabs_font_css = """
<style>
div[class*="stTextInput"] label {
  font-size: 26px;
  color: black;
}
div[class*="stSelectbox"] label {
  font-size: 26px;
  color: black;
}
</style>
"""
#POTRZEBNE FUNKCJE
#1 Funkcja do wyodrębnienia wartości procentowej
def extract_percentage(text):
    import re
    match = re.search(r'(\d+,\d+|\d+)%', text)
    return match.group(0) if match else ''

#2 Funkcja do konwersji wartości procentowej na float
def percentage_to_float(percentage_str):
    if pd.isna(percentage_str) or not percentage_str:
        return 0.0  # Zmieniono na 0.0, aby brakujące wartości były traktowane jako 0
    # Zamiana przecinka na kropkę, usunięcie znaku '%'
    return float(percentage_str.replace(',', '.').replace('%', ''))

def extract_numbers_as_text(text):
    numbers = re.findall(r'\d+', text)
    return f"{numbers[0]}+{numbers[1]}" if len(numbers) >= 2 else None


dzisiejsza_data = datetime.datetime.now().strftime("%d.%m.%Y")




############################################################################### CYKL Q3  ##############################################################################################
if sekcja == 'Cykl Q3':
    st.write(tabs_font_css, unsafe_allow_html=True)

    df = st.file_uploader(
    label = "Wrzuć plik Cykl - Cykl Q3"
    )
    if df:
        df = pd.read_excel(df, sheet_name = 'Promocje na utrzymanie i FUS', skiprows = 15, usecols = [1,2,9,10])
        st.write(df.head())
        
        #usuń braki danych z Kod klienta
    df = df.dropna(subset=['Kod klienta'])

    # klient na całkowite
    df = df[df['KLIENT'] != '(puste)']
    df['KLIENT'] = df['KLIENT'].astype(int)
    df['Kod klienta'] = df['Kod klienta'].astype(int)

    # Zmiana nazw kolumn
    df = df.rename(columns={'0.12.1': '12', '0.14.1': '14'})

    #Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnach '12' lub '14' jest słowo 'powiązanie'
    df['SIECIOWY'] = df.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['12']).lower() or 'powiązanie' in str(row['14']).lower() else '', axis=1)

    #SPRAWDZENIE CZY DZIAŁA
    #df[df['SIECIOWY'] == 'SIECIOWY']
    #DZIAŁA :)

    
    # Zastosowanie funkcji do kolumn '12' i '14'
    df['12_percent'] = df['12'].apply(extract_percentage)
    df['14_percent'] = df['14'].apply(extract_percentage)


    # Konwersja kolumn '12_percent' i '14_percent' na liczby zmiennoprzecinkowe
    df['12_percent'] = df['12_percent'].apply(percentage_to_float)
    df['14_percent'] = df['14_percent'].apply(percentage_to_float)

    # Dodaj nową kolumnę 'max_percent' z maksymalnymi wartościami z kolumn '12_percent' i '14_percent'
    df['max_percent'] = df[['12_percent', '14_percent']].max(axis=1)

    # Wybierz wiersze, gdzie 'max_percent' nie jest równa 0
    filtered_df = df[df['max_percent'] != 0]

    standard = filtered_df[filtered_df['SIECIOWY'] != 'SIECIOWY']
    powiazanie = filtered_df[filtered_df['SIECIOWY'] == 'SIECIOWY']

    #len(standard), len(powiazanie), len(filtered_df)

    standard_ost = standard[['Kod klienta', 'max_percent']]

    powiazanie = powiazanie[['KLIENT','Kod klienta','max_percent']]


    #TERAZ IMS
    ims = st.file_uploader(
        label = "Wrzuć plik ims_nhd"
    )

    if ims:
        ims = pd.read_excel(ims, usecols=[0,2,19,21])
        st.write(ims.head())

    ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
    ims = ims[ims['APD_Rodzaj_farmaceutyczny'].isin(['AP - Apteka','ME - Sklep zielarsko - medyczny','PU - Punkt apteczny'])]

    wynik_df = pd.merge(powiazanie, ims, left_on='KLIENT', right_on='Klient', how='left')

    #Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
    wynik_df = wynik_df[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]


    #to są kody SAP
    wynik_df1 = wynik_df.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df1 = wynik_df1[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df2 = wynik_df.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df2 = wynik_df2[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone = pd.concat([standard_ost, wynik_df1, wynik_df2], axis = 0)
  
    posortowane = polaczone.sort_values(by='max_percent', ascending=False)

    ostatecznie = posortowane.drop_duplicates(subset='Kod klienta')


    st.write('Jeśli to pierwszy monitoring, pobierz ten plik, jeśli nie, wrzuć plik z poprzedniego monitoringu i NIE POBIERAJ TEGO PLIKU')
    excel_file = io.BytesIO()
    with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
        ostatecznie.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file.seek(0)  # Resetowanie wskaźnika do początku pliku

    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz, jeśli to pierwszy monitoring',
        data=excel_file,
        file_name='czy_dodac.xlsx',
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    #plik z poprzedniego monitoringu
    poprzedni = st.file_uploader(
        label = "Wrzuć plik z poprzedniego monitoringu"
    )

    if poprzedni:
        poprzedni = pd.read_excel(poprzedni)
        st.write(poprzedni.head())

    poprzedni = poprzedni.rename(columns={'max_percent': 'old_percent'})
    # Wykonanie left join, dodanie 'old_percent' do pliku 'ostatecznie'
    result = ostatecznie.merge(poprzedni[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
    result['old_percent'] = result['old_percent'].fillna(0)
    result['Czy dodać'] = result.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)
    st.write('Kliknij aby pobrać plik z kodami, które kody należy dodać')

    excel_file1 = io.BytesIO()
    with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku1 = f"CYKL_Q3_{dzisiejsza_data}.xlsx"
    #Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz',
        data=excel_file1,
        file_name=nazwa_pliku1,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    result = result.drop(columns=['old_percent', 'Czy dodać'])


    st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')
    excel_file2 = io.BytesIO()
    with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku = f"FM_CYKL_Q3_{dzisiejsza_data}.xlsx"
    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz nowy plik FORMUŁA MAX',
        data=excel_file2,
        file_name = nazwa_pliku,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

############################################################################### CYKL Q4  ##############################################################################################
if sekcja == 'Cykl Q4':
    st.write(tabs_font_css, unsafe_allow_html=True)

    df = st.file_uploader(
    label = "Wrzuć plik Cykl - Cykl Q4"
    )
    if df:
        df = pd.read_excel(df, sheet_name = 'Promocje na utrzymanie i FUS', skiprows = 15, usecols = [1,2,9,10])
        st.write(df.head())
        
        #usuń braki danych z Kod klienta
    df = df.dropna(subset=['Kod klienta'])

    # klient na całkowite
    df = df[df['KLIENT'] != '(puste)']
    df['KLIENT'] = df['KLIENT'].astype(int)
    df['Kod klienta'] = df['Kod klienta'].astype(int)

    # Zmiana nazw kolumn
    df = df.rename(columns={'0.12.1': '12', '0.14.1': '14'})

    #Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnach '12' lub '14' jest słowo 'powiązanie'
    df['SIECIOWY'] = df.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['12']).lower() or 'powiązanie' in str(row['14']).lower() else '', axis=1)

    #SPRAWDZENIE CZY DZIAŁA
    #df[df['SIECIOWY'] == 'SIECIOWY']
    #DZIAŁA :)

    
    # Zastosowanie funkcji do kolumn '12' i '14'
    df['12_percent'] = df['12'].apply(extract_percentage)
    df['14_percent'] = df['14'].apply(extract_percentage)


    # Konwersja kolumn '12_percent' i '14_percent' na liczby zmiennoprzecinkowe
    df['12_percent'] = df['12_percent'].apply(percentage_to_float)
    df['14_percent'] = df['14_percent'].apply(percentage_to_float)

    # Dodaj nową kolumnę 'max_percent' z maksymalnymi wartościami z kolumn '12_percent' i '14_percent'
    df['max_percent'] = df[['12_percent', '14_percent']].max(axis=1)

    # Wybierz wiersze, gdzie 'max_percent' nie jest równa 0
    filtered_df = df[df['max_percent'] != 0]

    standard = filtered_df[filtered_df['SIECIOWY'] != 'SIECIOWY']
    powiazanie = filtered_df[filtered_df['SIECIOWY'] == 'SIECIOWY']

    #len(standard), len(powiazanie), len(filtered_df)

    standard_ost = standard[['Kod klienta', 'max_percent']]

    powiazanie = powiazanie[['KLIENT','Kod klienta','max_percent']]


    #TERAZ IMS
    ims = st.file_uploader(
        label = "Wrzuć plik ims_nhd"
    )

    if ims:
        ims = pd.read_excel(ims, usecols=[0,2,19,21])
        st.write(ims.head())

    ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
    ims = ims[ims['APD_Rodzaj_farmaceutyczny'].isin(['AP - Apteka','ME - Sklep zielarsko - medyczny','PU - Punkt apteczny'])]

    wynik_df = pd.merge(powiazanie, ims, left_on='KLIENT', right_on='Klient', how='left')

    #Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
    wynik_df = wynik_df[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]


    #to są kody SAP
    wynik_df1 = wynik_df.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df1 = wynik_df1[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df2 = wynik_df.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df2 = wynik_df2[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone = pd.concat([standard_ost, wynik_df1, wynik_df2], axis = 0)
  
    posortowane = polaczone.sort_values(by='max_percent', ascending=False)

    ostatecznie = posortowane.drop_duplicates(subset='Kod klienta')


    st.write('Jeśli to pierwszy monitoring, pobierz ten plik, jeśli nie, wrzuć plik z poprzedniego monitoringu i NIE POBIERAJ TEGO PLIKU')
    excel_file = io.BytesIO()
    with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
        ostatecznie.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file.seek(0)  # Resetowanie wskaźnika do początku pliku

    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz, jeśli to pierwszy monitoring',
        data=excel_file,
        file_name='czy_dodac.xlsx',
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    #plik z poprzedniego monitoringu
    poprzedni = st.file_uploader(
        label = "Wrzuć plik z poprzedniego monitoringu"
    )

    if poprzedni:
        poprzedni = pd.read_excel(poprzedni)
        st.write(poprzedni.head())

    poprzedni = poprzedni.rename(columns={'max_percent': 'old_percent'})
    # Wykonanie left join, dodanie 'old_percent' do pliku 'ostatecznie'
    result = ostatecznie.merge(poprzedni[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
    result['old_percent'] = result['old_percent'].fillna(0)
    result['Czy dodać'] = result.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)
    st.write('Kliknij aby pobrać plik z kodami, które kody należy dodać')

    excel_file1 = io.BytesIO()
    with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku1 = f"CYKL_Q4_{dzisiejsza_data}.xlsx"
    #Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz',
        data=excel_file1,
        file_name=nazwa_pliku1,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    result = result.drop(columns=['old_percent', 'Czy dodać'])


    st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')
    excel_file2 = io.BytesIO()
    with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku = f"FM_CYKL_Q4_{dzisiejsza_data}.xlsx"
    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz nowy plik FORMUŁA MAX',
        data=excel_file2,
        file_name = nazwa_pliku,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )


############################################################################### ZIOŁOWY SZTOS  ##############################################################################################
if sekcja == 'Ziołowy sztos':
    st.write(tabs_font_css, unsafe_allow_html=True)

    df = st.file_uploader(
    label = "Wrzuć plik Cykl - Ziołowy sztos"
    )
    if df:
        df = pd.read_excel(df, sheet_name = 'Promocje_rabat', skiprows = 14, usecols = [1,2,10])
        st.write(df.head())
        
        #usuń braki danych z Kod klienta
    df = df.dropna(subset=['Kod klienta'])

    # klient na całkowite
    df = df[df['KLIENT'] != '(puste)']
    df['KLIENT'] = df['KLIENT'].astype(int)
    df['Kod klienta'] = df['Kod klienta'].astype(int)

    # Zmiana nazw kolumn
    #df = df.rename(columns={'0.12.1': '12', '0.14.1': '14'})

    #Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnach '12' lub '14' jest słowo 'powiązanie'
    df['SIECIOWY'] = df.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['PAKIET']).lower() else '', axis=1)

    #SPRAWDZENIE CZY DZIAŁA
    #df[df['SIECIOWY'] == 'SIECIOWY']
    #DZIAŁA :)

    
    # Zastosowanie funkcji do kolumn '12' i '14'
    df['PAKIET_percent'] = df['PAKIET'].apply(extract_percentage)


    # Konwersja kolumn '12_percent' i '14_percent' na liczby zmiennoprzecinkowe
    df['PAKIET_percent'] = df['PAKIET_percent'].apply(percentage_to_float)

    # Dodaj nową kolumnę 'max_percent' z maksymalnymi wartościami z kolumn '12_percent' i '14_percent'
    df['max_percent'] = df[['PAKIET_percent']].max(axis=1)

    # Wybierz wiersze, gdzie 'max_percent' nie jest równa 0
    filtered_df = df[df['max_percent'] != 0]

    standard = filtered_df[filtered_df['SIECIOWY'] != 'SIECIOWY']
    powiazanie = filtered_df[filtered_df['SIECIOWY'] == 'SIECIOWY']

    #len(standard), len(powiazanie), len(filtered_df)

    standard_ost = standard[['Kod klienta', 'max_percent']]

    powiazanie = powiazanie[['KLIENT','Kod klienta','max_percent']]


    #TERAZ IMS
    ims = st.file_uploader(
        label = "Wrzuć plik ims_nhd"
    )

    if ims:
        ims = pd.read_excel(ims, usecols=[0,2,19,21])
        st.write(ims.head())

    ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
    ims = ims[ims['APD_Rodzaj_farmaceutyczny'].isin(['AP - Apteka','ME - Sklep zielarsko - medyczny','PU - Punkt apteczny'])]

    wynik_df = pd.merge(powiazanie, ims, left_on='KLIENT', right_on='Klient', how='left')

    #Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
    wynik_df = wynik_df[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]


    #to są kody SAP
    wynik_df1 = wynik_df.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df1 = wynik_df1[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df2 = wynik_df.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df2 = wynik_df2[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone = pd.concat([standard_ost, wynik_df1, wynik_df2], axis = 0)
  
    posortowane = polaczone.sort_values(by='max_percent', ascending=False)

    ostatecznie = posortowane.drop_duplicates(subset='Kod klienta')


    st.write('Jeśli to pierwszy monitoring, pobierz ten plik, jeśli nie, wrzuć plik z poprzedniego monitoringu i NIE POBIERAJ TEGO PLIKU')
    excel_file = io.BytesIO()
    with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
        ostatecznie.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file.seek(0)  # Resetowanie wskaźnika do początku pliku

    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz, jeśli to pierwszy monitoring',
        data=excel_file,
        file_name='czy_dodac.xlsx',
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    #plik z poprzedniego monitoringu
    poprzedni = st.file_uploader(
        label = "Wrzuć plik z poprzedniego monitoringu"
    )

    if poprzedni:
        poprzedni = pd.read_excel(poprzedni)
        st.write(poprzedni.head())

    poprzedni = poprzedni.rename(columns={'max_percent': 'old_percent'})
    # Wykonanie left join, dodanie 'old_percent' do pliku 'ostatecznie'
    result = ostatecznie.merge(poprzedni[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
    result['old_percent'] = result['old_percent'].fillna(0)
    result['Czy dodać'] = result.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)
    st.write('Kliknij aby pobrać plik z kodami, które kody należy dodać')

    excel_file1 = io.BytesIO()
    with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku1 = f"ZIOŁOWY_SZTOS_{dzisiejsza_data}.xlsx"
    #Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz',
        data=excel_file1,
        file_name=nazwa_pliku1,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    result = result.drop(columns=['old_percent', 'Czy dodać'])


    st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')
    excel_file2 = io.BytesIO()
    with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku = f"FM_ZIOŁOWY_SZTOS_{dzisiejsza_data}.xlsx"
    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz nowy plik FORMUŁA MAX',
        data=excel_file2,
        file_name = nazwa_pliku,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )


############################################################################# PLASTRY #####################################################################################

if sekcja == 'Plastry':
    st.write(tabs_font_css, unsafe_allow_html=True)

    df = st.file_uploader(
        label="Wrzuć plik Cykl - Plastry"
    )
    
    if df:
        # Pobieramy listę dostępnych arkuszy
        xls = pd.ExcelFile(df)
        
        # Sprawdzamy, które arkusze są dostępne i wczytujemy odpowiednie dane
        if 'Rabat' in xls.sheet_names:
            Rabat = pd.read_excel(df, sheet_name='Rabat', skiprows=17, usecols=[1, 2, 19, 20, 21, 22])
            st.write("Dane z arkusza Rabat:")
            st.write(Rabat.head())

        # Sprawdzamy, które arkusze są dostępne i wczytujemy odpowiednie dane
        if 'Ekspozytor, rabat' in xls.sheet_names:
            Eksp = pd.read_excel(df, sheet_name='Ekspozytor, rabat', skiprows=15, usecols=[1, 2, 11])
            st.write("Dane z arkusza Ekspozytor, rabat:")
            st.write(Eksp.head())

        #usuń braki danych z Kod klienta
        Rabat = Rabat.dropna(subset=['KLIENT']) 
        Eksp = Eksp.dropna(subset=['KLIENT'])
        #Eksp = Eksp.dropna(subset=['Kod klienta'])
        #st.write(Eksp['KLIENT'].unique())
        #st.write(Eksp[~Eksp['KLIENT'].apply(lambda x: str(x).isdigit())])
        Rabat = Rabat[Rabat['KLIENT'] != '(puste)']
        Eksp = Eksp[Eksp['KLIENT'] != '(puste)']
        
        # klient na całkowite
        Rabat['KLIENT'] = Rabat['KLIENT'].astype(int)
        Eksp['KLIENT'] = Eksp['KLIENT'].astype(int)


        Rabat.columns=['KLIENT','Kod klienta','9','14','18','20']
        Eksp.columns=['KLIENT','Kod klienta','14']
        
 
        
        # Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnach '12' lub '14' jest słowo 'powiązanie'
        Rabat['SIECIOWY'] = Rabat.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['9']).lower() or 'powiązanie' in str(row['14']).lower() 
                                        or 'powiązanie' in str(row['18']).lower() or 'powiązanie' in str(row['20']).lower() else '', axis=1)
        Eksp['SIECIOWY'] = Eksp.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['14']).lower() else '', axis=1)

        Rabat['9_percent'] = Rabat['9'].apply(extract_percentage)
        Rabat['14_percent'] = Rabat['14'].apply(extract_percentage)
        Rabat['18_percent'] = Rabat['18'].apply(extract_percentage)
        Rabat['20_percent'] = Rabat['20'].apply(extract_percentage)
        Eksp['14_percent'] = Eksp['14'].apply(extract_percentage)

        # na zmiennoprzecinkowe
        Rabat['9_percent'] = Rabat['9_percent'].apply(percentage_to_float)
        Rabat['14_percent'] = Rabat['14_percent'].apply(percentage_to_float)
        Rabat['18_percent'] = Rabat['18_percent'].apply(percentage_to_float)
        Rabat['20_percent'] = Rabat['20_percent'].apply(percentage_to_float)
        Eksp['14_percent'] = Eksp['14_percent'].apply(percentage_to_float)
    
        # Dodaj nową kolumnę 'max_percent'
        Rabat1 = Rabat[Rabat['SIECIOWY'] == 'SIECIOWY']
        Rabat2 = Rabat[Rabat['SIECIOWY'] != 'SIECIOWY']
        Rabat1['max_percent'] = Rabat1[['9_percent', '14_percent', '18_percent','20_percent']].max(axis=1)
        Rabat2['max_percent'] = Rabat2[['9_percent', '14_percent', '18_percent','20_percent']].max(axis=1)

        Eksp1 = Eksp[Eksp['SIECIOWY'] == 'SIECIOWY']
        Eksp2 = Eksp[Eksp['SIECIOWY'] != 'SIECIOWY']
        Eksp1['max_percent'] = Eksp1[['14_percent']].max(axis=1)
        Eksp2['max_percent'] = Eksp2[['14_percent']].max(axis=1)

        ###### 1 to SIECIOWI, 2 to punkt dostaw
        Rabat1 = Rabat1[['KLIENT','Kod klienta','max_percent']]
        Eksp1 = Eksp1[['KLIENT','Kod klienta','max_percent']]

        Rabat2 = Rabat2[['Kod klienta','max_percent']]
        Eksp2 = Eksp2[['Kod klienta','max_percent']]
        
        stand = pd.concat([Rabat2, Eksp2], ignore_index=True)
        pow = pd.concat([Rabat1, Eksp1], ignore_index=True)

        
        #TERAZ IMS
        ims = st.file_uploader(
            label = "Wrzuć plik ims_nhd"
        )
    
        if ims:
            ims = pd.read_excel(ims, usecols=[0,2,19,21])
            st.write(ims.head())
    
        ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
        ims = ims[ims['APD_Rodzaj_farmaceutyczny'].isin(['AP - Apteka','ME - Sklep zielarsko - medyczny','PU - Punkt apteczny'])]
    
        wynik_df = pd.merge(pow, ims, left_on='KLIENT', right_on='Klient', how='left')
    
        # Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
        wynik_df = wynik_df[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
    
        #to są kody SAP
        wynik_df1 = wynik_df.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
        wynik_df1 = wynik_df1[['Kod klienta','max_percent']]
        #wynik_df1
    
        #to są kody powiazan
        wynik_df2 = wynik_df.rename(columns={'KLIENT': 'Kod klienta'})
        wynik_df2 = wynik_df2[['Kod klienta','max_percent']]
        #wynik_df2

        #POŁĄCZYĆ wynik_df z standard_ost
        polaczone = pd.concat([stand, wynik_df1, wynik_df2], axis = 0)
  
        posortowane = polaczone.sort_values(by='max_percent', ascending=False)

        ostatecznie = posortowane.drop_duplicates(subset='Kod klienta')
        ostatecznie = ostatecznie[ostatecznie['max_percent'] != 0]

        st.write('Jeśli to pierwszy monitoring, pobierz ten plik, jeśli nie, wrzuć plik z poprzedniego monitoringu i NIE POBIERAJ TEGO PLIKU')

        excel_file = io.BytesIO()
        with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
            ostatecznie.to_excel(writer, index=False, sheet_name='Sheet1')
        excel_file.seek(0)  # Resetowanie wskaźnika do początku pliku
    
        # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Pobierz, jeśli to pierwszy monitoring',
            data=excel_file,
            file_name='czy_dodac.xlsx',
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    
        #plik z poprzedniego monitoringu
        poprzedni = st.file_uploader(
            label = "Wrzuć plik z poprzedniego monitoringu"
        )
    
        if poprzedni:
            poprzedni = pd.read_excel(poprzedni)
            st.write(poprzedni.head())
    
        poprzedni = poprzedni.rename(columns={'max_percent': 'old_percent'})
        # Wykonanie left join, dodanie 'old_percent' do pliku 'ostatecznie'
        result = ostatecznie.merge(poprzedni[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
        result['old_percent'] = result['old_percent'].fillna(0)
        result['Czy dodać'] = result.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)
        st.write('Kliknij aby pobrać plik z kodami, które kody należy dodać')
    
        excel_file1 = io.BytesIO()
        with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
            result.to_excel(writer, index=False, sheet_name='Sheet1')
        excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku
    
        nazwa_pliku1 = f"PLASTRY_{dzisiejsza_data}.xlsx"
        # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Pobierz',
            data=excel_file1,
            file_name=nazwa_pliku1,
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    
        result = result.drop(columns=['old_percent', 'Czy dodać'])
    
    
        st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')
        excel_file2 = io.BytesIO()
        with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
            result.to_excel(writer, index=False, sheet_name='Sheet1')
        excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku
    
        nazwa_pliku = f"FM_PLASTRY_{dzisiejsza_data}.xlsx"
        # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Pobierz nowy plik FORMUŁA MAX',
            data=excel_file2,
            file_name = nazwa_pliku,
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )


############################################################################# CERA+ PANTHENOL #####################################################################################
if sekcja == 'Cera+ Panthenol':
    st.write(tabs_font_css, unsafe_allow_html=True)

    df = st.file_uploader(
    label="Wrzuć plik Cykl - Cera+ Panthenol")
    
    if df:
        # Pobieramy listę dostępnych arkuszy
        xls = pd.ExcelFile(df)
        
        # Sprawdzamy, które arkusze są dostępne i wczytujemy odpowiednie dane
        if 'CERA+' in xls.sheet_names:
            C = pd.read_excel(df, sheet_name='CERA+', skiprows=13, usecols=[1, 2, 10])
            st.write("Dane z arkusza CERA+:")
            st.write(C.head())

        # Sprawdzamy, które arkusze są dostępne i wczytujemy odpowiednie dane
        if 'Panthenol 105210' in xls.sheet_names:
            P1 = pd.read_excel(df, sheet_name='Panthenol 105210', skiprows=13, usecols=[1, 2, 10])
            st.write("Dane z arkusza Panthenol 105210:")
            st.write(P1.head())

        # Sprawdzamy, które arkusze są dostępne i wczytujemy odpowiednie dane
        if 'Panthenol 105211' in xls.sheet_names:
            P2 = pd.read_excel(df, sheet_name='Panthenol 105211', skiprows=13, usecols=[1, 2, 10])
            st.write("Dane z arkusza Panthenol 105211:")
            st.write(P2.head())

        # Sprawdzamy, które arkusze są dostępne i wczytujemy odpowiednie dane
        if 'Panthenol 105212' in xls.sheet_names:
            P3 = pd.read_excel(df, sheet_name='Panthenol 105212', skiprows=13, usecols=[1, 2, 10])
            st.write("Dane z arkusza Panthenol 105212:")
            st.write(P3.head())

        #usuń braki danych z Kod klienta
        C = C.dropna(subset=['Kod klienta'])
        P1 = P1.dropna(subset=['Kod klienta'])
        P2 = P2.dropna(subset=['Kod klienta'])
        P3 = P3.dropna(subset=['Kod klienta'])

        C = C[C['KLIENT'] != '(puste)']
        P1 = P1[P1['KLIENT'] != '(puste)']
        P2 = P2[P2['KLIENT'] != '(puste)']
        P3 = P3[P3['KLIENT'] != '(puste)']
 
    
        # klient na całkowite
        C['KLIENT'] = C['KLIENT'].astype(int)
        C['Kod klienta'] = C['Kod klienta'].astype(int)
        P1['KLIENT'] = P1['KLIENT'].astype(int)
        P1['Kod klienta'] = P1['Kod klienta'].astype(int)
        P2['KLIENT'] = P2['KLIENT'].astype(int)
        P2['Kod klienta'] = P2['Kod klienta'].astype(int)
        P3['KLIENT'] = P3['KLIENT'].astype(int)
        P3['Kod klienta'] = P3['Kod klienta'].astype(int)
        
    
        C.columns=['KLIENT','Kod klienta','pakiet']
        P1.columns=['KLIENT','Kod klienta','pakiet']
        P2.columns=['KLIENT','Kod klienta','pakiet']
        P3.columns=['KLIENT','Kod klienta','pakiet']
    
        #Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnach '12' lub '14' jest słowo 'powiązanie'
        C['SIECIOWY'] = C.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['pakiet']).lower() else '', axis=1)
        P1['SIECIOWY'] = P1.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['pakiet']).lower() else '', axis=1)
        P2['SIECIOWY'] = P2.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['pakiet']).lower() else '', axis=1)
        P3['SIECIOWY'] = P3.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['pakiet']).lower() else '', axis=1)
    
        #SPRAWDZENIE CZY DZIAŁA
        #df[df['SIECIOWY'] == 'SIECIOWY']
        #DZIAŁA :)
    
        
        # Zastosowanie funkcji do kolumn '12' i '14'
        C['pakiet_percent'] = C['pakiet'].apply(extract_percentage)
        P1['pakiet_percent'] = P1['pakiet'].apply(extract_percentage)
        P2['pakiet_percent'] = P2['pakiet'].apply(extract_percentage)
        P3['pakiet_percent'] = P3['pakiet'].apply(extract_percentage)
    
    
        # Konwersja kolumn '12_percent' i '14_percent' na liczby zmiennoprzecinkowe
        C['pakiet_percent'] = C['pakiet_percent'].apply(percentage_to_float)
        P1['pakiet_percent'] = P1['pakiet_percent'].apply(percentage_to_float)
        P2['pakiet_percent'] = P2['pakiet_percent'].apply(percentage_to_float)
        P3['pakiet_percent'] = P3['pakiet_percent'].apply(percentage_to_float)
    
        # Dodaj nową kolumnę 'max_percent' z maksymalnymi wartościami z kolumn '12_percent' i '14_percent'
        C['max_percent'] = C[['pakiet_percent']].max(axis=1)
        P1['max_percent'] = P1[['pakiet_percent']].max(axis=1)
        P2['max_percent'] = P2[['pakiet_percent']].max(axis=1)
        P3['max_percent'] = P3[['pakiet_percent']].max(axis=1)

        
    
        # Wybierz wiersze, gdzie 'max_percent' nie jest równa 0
        filtered_c = C[C['max_percent'] != 0]
        standard_c = filtered_c[filtered_c['SIECIOWY'] != 'SIECIOWY']
        powiazanie_c = filtered_c[filtered_c['SIECIOWY'] == 'SIECIOWY']
        #len(standard), len(powiazanie), len(filtered_df)
        standard_ost_c = standard_c[['Kod klienta', 'max_percent']]
        powiazanie_c = powiazanie_c[['KLIENT','Kod klienta','max_percent']]
    
        filtered_p1 = P1[P1['max_percent'] != 0]
        standard_p1 = filtered_p1[filtered_p1['SIECIOWY'] != 'SIECIOWY']
        powiazanie_p1 = filtered_p1[filtered_p1['SIECIOWY'] == 'SIECIOWY']
        #len(standard), len(powiazanie), len(filtered_df)
        standard_ost_p1 = standard_p1[['Kod klienta', 'max_percent']]
        powiazanie_p1 = powiazanie_p1[['KLIENT','Kod klienta','max_percent']]
    
        filtered_p2 = P2[P2['max_percent'] != 0]
        standard_p2 = filtered_p2[filtered_p2['SIECIOWY'] != 'SIECIOWY']
        powiazanie_p2 = filtered_p2[filtered_p2['SIECIOWY'] == 'SIECIOWY']
        #len(standard), len(powiazanie), len(filtered_df)
        standard_ost_p2 = standard_p2[['Kod klienta', 'max_percent']]
        powiazanie_p2 = powiazanie_p2[['KLIENT','Kod klienta','max_percent']]
    
        filtered_p3 = P3[P3['max_percent'] != 0]
        standard_p3 = filtered_p3[filtered_p3['SIECIOWY'] != 'SIECIOWY']
        powiazanie_p3 = filtered_p3[filtered_p3['SIECIOWY'] == 'SIECIOWY']
        #len(standard), len(powiazanie), len(filtered_df)
        standard_ost_p3 = standard_p3[['Kod klienta', 'max_percent']]
        powiazanie_p3 = powiazanie_p3[['KLIENT','Kod klienta','max_percent']]
    
        #standard_ost_3
        #powiazanie_p3
    
    
    
        #TERAZ IMS
        ims = st.file_uploader(
            label = "Wrzuć plik ims_nhd")
    
        if ims:
            ims = pd.read_excel(ims, usecols=[0,2,19,21])
            st.write(ims.head())
    
        ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
        ims = ims[ims['APD_Rodzaj_farmaceutyczny'].isin(['AP - Apteka','ME - Sklep zielarsko - medyczny','PU - Punkt apteczny'])]
        
        wynik_df_c = pd.merge(powiazanie_c, ims, left_on='KLIENT', right_on='Klient', how='left')
        wynik_df_p1 = pd.merge(powiazanie_p1, ims, left_on='KLIENT', right_on='Klient', how='left')
        wynik_df_p2 = pd.merge(powiazanie_p2, ims, left_on='KLIENT', right_on='Klient', how='left')
        wynik_df_p3 = pd.merge(powiazanie_p3, ims, left_on='KLIENT', right_on='Klient', how='left')
        # Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
        wynik_df_c = wynik_df_c[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
        wynik_df_p1 = wynik_df_p1[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
        wynik_df_p2 = wynik_df_p2[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
        wynik_df_p3 = wynik_df_p3[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
        #to są kody SAP
        wynik_df1_c = wynik_df_c.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
        wynik_df1_c = wynik_df1_c[['Kod klienta','max_percent']]
        wynik_df1_p1 = wynik_df_p1.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
        wynik_df1_p1 = wynik_df1_p1[['Kod klienta','max_percent']]
        wynik_df1_p2 = wynik_df_p2.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
        wynik_df1_p2 = wynik_df1_p2[['Kod klienta','max_percent']]
        wynik_df1_p3 = wynik_df_p3.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
        wynik_df1_p3 = wynik_df1_p3[['Kod klienta','max_percent']]
            #wynik_df1
        #to są kody powiazan
        wynik_df2_c = wynik_df_c.rename(columns={'KLIENT': 'Kod klienta'})
        wynik_df2_c = wynik_df2_c[['Kod klienta','max_percent']]
        wynik_df2_p1 = wynik_df_p1.rename(columns={'KLIENT': 'Kod klienta'})
        wynik_df2_p1 = wynik_df2_p1[['Kod klienta','max_percent']]
        wynik_df2_p2 = wynik_df_p2.rename(columns={'KLIENT': 'Kod klienta'})
        wynik_df2_p2 = wynik_df2_p2[['Kod klienta','max_percent']]
        wynik_df2_p3 = wynik_df_p3.rename(columns={'KLIENT': 'Kod klienta'})
        wynik_df2_p3 = wynik_df2_p3[['Kod klienta','max_percent']]
        #wynik_df2
        #POŁĄCZYĆ wynik_df z standard_ost
        polaczone_c = pd.concat([standard_c, wynik_df1_c, wynik_df2_c], axis = 0)
        posortowane_c = polaczone_c.sort_values(by='max_percent', ascending=False)
        ostatecznie_c = posortowane_c.drop_duplicates(subset='Kod klienta')
        ostatecznie_c = ostatecznie_c[ostatecznie_c['max_percent'] != 0]

        polaczone_p1 = pd.concat([standard_p1, wynik_df1_p1, wynik_df2_p1], axis = 0)
        posortowane_p1 = polaczone_p1.sort_values(by='max_percent', ascending=False)
        ostatecznie_p1 = posortowane_p1.drop_duplicates(subset='Kod klienta')
        ostatecznie_p1 = ostatecznie_p1[ostatecznie_p1['max_percent'] != 0]

        polaczone_p2 = pd.concat([standard_p2, wynik_df1_p2, wynik_df2_p2], axis = 0)
        posortowane_p2 = polaczone_p2.sort_values(by='max_percent', ascending=False)
        ostatecznie_p2 = posortowane_p2.drop_duplicates(subset='Kod klienta')
        ostatecznie_p2 = ostatecznie_p2[ostatecznie_p2['max_percent'] != 0]

        polaczone_p3 = pd.concat([standard_p3, wynik_df1_p3, wynik_df2_p3], axis = 0)
        posortowane_p3 = polaczone_p3.sort_values(by='max_percent', ascending=False)
        ostatecznie_p3 = posortowane_p3.drop_duplicates(subset='Kod klienta')
        ostatecznie_p3 = ostatecznie_p3[ostatecznie_p3['max_percent'] != 0]
    
        st.write('Jeśli to pierwszy monitoring, pobierz ten plik, jeśli nie, wrzuć plik z poprzedniego monitoringu i NIE POBIERAJ TEGO PLIKU')
        excel_file = io.BytesIO()

        with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
        # Jeśli dane BRAZOFLAMIN istnieją, zapisz je w odpowiednim arkuszu
            if 'ostatecznie_c' in locals():
                ostatecznie_c = ostatecznie_c[['Kod klienta','max_percent']]
                ostatecznie_c.to_excel(writer, index=False, sheet_name='CERA+')

        # Jeśli dane diazepam istnieją, zapisz je w odpowiednim arkuszu
            if 'ostatecznie_p1' in locals():
                ostatecznie_p1 = ostatecznie_p1[['Kod klienta','max_percent']]
                ostatecznie_p1.to_excel(writer, index=False, sheet_name='Panthenol 105210')

            if 'ostatecznie_p2' in locals():
                ostatecznie_p2 = ostatecznie_p2[['Kod klienta','max_percent']]
                ostatecznie_p2.to_excel(writer, index=False, sheet_name='Panthenol 105211')

            if 'ostatecznie_p3' in locals():
                ostatecznie_p3 = ostatecznie_p3[['Kod klienta','max_percent']]
                ostatecznie_p3.to_excel(writer, index=False, sheet_name='Panthenol 105212')

        excel_file.seek(0)  # Resetowanie wskaźnika do początku pliku

         # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Pobierz, jeśli to pierwszy monitoring',
            data=excel_file,
            file_name='czy_dodac.xlsx',
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    
        # Plik z poprzedniego monitoringu
        poprzedni = st.file_uploader(
            label="Wrzuć plik z poprzedniego monitoringu"
        )
    
        if poprzedni:
            xls = pd.ExcelFile(poprzedni)  # Pobranie pliku z arkuszami
    
        # Wczytanie danych z odpowiednich arkuszy
        if 'CERA+' in xls.sheet_names:
            poprzedni_c = pd.read_excel(poprzedni, sheet_name='CERA+')
            st.write('Poprzedni monitoring - CERA+:')
            st.write(poprzedni_c.head())
        
        if 'Panthenol 105210' in xls.sheet_names:
            poprzedni_p1 = pd.read_excel(poprzedni, sheet_name='Panthenol 105210')
            st.write('Poprzedni monitoring - Panthenol 105210:')
            st.write(poprzedni_p1.head())

        if 'Panthenol 105211' in xls.sheet_names:
            poprzedni_p2 = pd.read_excel(poprzedni, sheet_name='Panthenol 105211')
            st.write('Poprzedni monitoring - Panthenol 105211:')
            st.write(poprzedni_p2.head())
        
        if 'Panthenol 105212' in xls.sheet_names:
            poprzedni_p3 = pd.read_excel(poprzedni, sheet_name='Panthenol 105212')
            st.write('Poprzedni monitoring - Panthenol 105212:')
            st.write(poprzedni_p3.head())

        # Przetwarzanie 
        if 'ostatecznie_c' in locals() and 'poprzedni_c' in locals():
            poprzedni_c = poprzedni_c.rename(columns={'max_percent': 'old_percent'})
            result_c = ostatecznie_c.merge(poprzedni_c[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
            result_c['old_percent'] = result_c['old_percent'].fillna(0)
            result_c['Czy dodać'] = result_c.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)
        
            # Przetwarzanie 
        if 'ostatecznie_p1' in locals() and 'poprzedni_p1' in locals():
            poprzedni_p1 = poprzedni_p1.rename(columns={'max_percent': 'old_percent'})
            result_p1 = ostatecznie_p1.merge(poprzedni_p1[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
            result_p1['old_percent'] = result_p1['old_percent'].fillna(0)
            result_p1['Czy dodać'] = result_p1.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)

        if 'ostatecznie_p2' in locals() and 'poprzedni_p2' in locals():
            poprzedni_p2 = poprzedni_p2.rename(columns={'max_percent': 'old_percent'})
            result_p2 = ostatecznie_p2.merge(poprzedni_p2[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
            result_p2['old_percent'] = result_p2['old_percent'].fillna(0)
            result_p2['Czy dodać'] = result_p2.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)


        if 'ostatecznie_p3' in locals() and 'poprzedni_p3' in locals():
            poprzedni_p3 = poprzedni_p3.rename(columns={'max_percent': 'old_percent'})
            result_p3 = ostatecznie_p3.merge(poprzedni_p3[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
            result_p3['old_percent'] = result_p3['old_percent'].fillna(0)
            result_p3['Czy dodać'] = result_p3.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)

       

       

       
        # Zapisywanie plików do Excela
        excel_file1 = io.BytesIO()
        with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
            if 'result_c' in locals():
                result_c.to_excel(writer, index=False, sheet_name='CERA+')
            if 'result_p1' in locals():
                result_p1.to_excel(writer, index=False, sheet_name='Panthenol 105210')
            if 'result_p2' in locals():
                result_p2.to_excel(writer, index=False, sheet_name='Panthenol 105211')
            if 'result_p3' in locals():
                result_p3.to_excel(writer, index=False, sheet_name='Panthenol 105212')


        excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

        # Definiowanie nazwy pliku
        nazwa_pliku = f"CERA+_PANTHENOL_{dzisiejsza_data}.xlsx"
        # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Kliknij aby pobrać plik z kodami, które kody należy dodać',
            data=excel_file1,
            file_name=nazwa_pliku,
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

        result_c = result_c.drop(columns=['old_percent', 'Czy dodać'])
        result_p1 = result_p1.drop(columns=['old_percent', 'Czy dodać'])
        result_p2 = result_p2.drop(columns=['old_percent','Czy dodać'])
        result_p3 = result_p3.drop(columns=['old_percent','Czy dodać'])
        # result_lg = result_lg.drop(columns=['old_pakiet', 'Czy dodać'])

        st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')

        # Tworzenie pliku Excel w pamięci
        excel_file2 = io.BytesIO()
    
        # Zapis do pliku Excel w pamięci
        with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
            result_c.to_excel(writer, index=False, sheet_name='CERA+')
            result_p1.to_excel(writer, index=False, sheet_name='Panthenol 105210')
            result_p2.to_excel(writer, index=False, sheet_name='Panthenol 105211')
            result_p3.to_excel(writer, index=False, sheet_name='Panthenol 105212')


        # Resetowanie wskaźnika do początku pliku
        excel_file2.seek(0) 
    
        # Definiowanie nazwy pliku
        nazwa_pliku = f"FM_CERA+_PANTHENOL_{dzisiejsza_data}.xlsx"
    
        # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Pobierz nowy plik FORMUŁA MAX',
            data=excel_file2,
            file_name=nazwa_pliku,
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )


################################################### Helituspan ###################################################
if sekcja == 'Helituspan':
    st.write(tabs_font_css, unsafe_allow_html=True)

    df = st.file_uploader(
        label="Wrzuć plik Cykl - Helituspan"
    )
    
    if df:
        # Pobieramy listę dostępnych arkuszy
        xls = pd.ExcelFile(df)
        
        # Sprawdzamy, które arkusze są dostępne i wczytujemy odpowiednie dane
        if 'Promocje_rabat' in xls.sheet_names:
            Lr = pd.read_excel(df, sheet_name='Promocje_rabat', skiprows=14, usecols=[1, 2, 11])
            st.write("Dane z arkusza Promocje_rabat:")
            st.write(Lr.head())


        # Sprawdzamy, które arkusze są dostępne i wczytujemy odpowiednie dane
        if 'Promocje_gratis' in xls.sheet_names:
            Lg = pd.read_excel(df, sheet_name='Promocje_gratis', skiprows=14, usecols=[2, 3, 10])
            st.write("Dane z arkusza Promocje_gratis:")
            st.write(Lg.head())



        #usuń braki danych z Kod klienta
        Lr = Lr.dropna(subset=['KLIENT']) 
        Lg = Lg.dropna(subset=['KLIENT']) 

        Lg = Lg[~Lg['PAKIET'].str.lower().str.contains('brak')]

        # klient na całkowite
        Lr['KLIENT'] = Lr['KLIENT'].astype(int)
        Lg['KLIENT'] = Lg['KLIENT'].astype(int)



        Lr.columns=['KLIENT','Kod klienta','rabat']
 
        
        # Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnach '12' lub '14' jest słowo 'powiązanie'
        Lr['SIECIOWY'] = Lr.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['rabat']).lower() else '', axis=1)
        Lg['SIECIOWY'] = Lg.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['PAKIET']).lower() else '', axis=1)

        Lr['rabat_percent'] = Lr['rabat'].apply(extract_percentage)

        Lg['pakiet'] = Lg['PAKIET'].apply(extract_numbers_as_text)
        #Lg

        # na zmiennoprzecinkowe
        Lr['rabat_percent'] = Lr['rabat_percent'].apply(percentage_to_float)
    
        # Dodaj nową kolumnę 'max_percent'
        Lr1 = Lr[Lr['SIECIOWY'] == 'SIECIOWY']
        Lr2 = Lr[Lr['SIECIOWY'] != 'SIECIOWY']
        Lr1['max_percent'] = Lr1[['rabat_percent']].max(axis=1)
        Lr2['max_percent'] = Lr2[['rabat_percent']].max(axis=1)
        
        ###### 1 to SIECIOWI, 2 to punkt dostaw
        Lr1 = Lr1[['KLIENT','Kod klienta','max_percent']]
        Lr2 = Lr2[['Kod klienta','max_percent']]


        Lg1 = Lg[Lg['SIECIOWY'] == 'SIECIOWY']
        Lg2 = Lg[Lg['SIECIOWY'] != 'SIECIOWY']

        
        #### p
        Lg1 = Lg1[['KLIENT','Kod klienta','pakiet']]
        Lg2 = Lg2[['Kod klienta','pakiet']]
        
        stand_lr = Lr2
        pow_lr = Lr1

        stand_lg = Lg2
        pow_lg = Lg1
        
        #TERAZ IMS
        ims = st.file_uploader(
            label = "Wrzuć plik ims_nhd"
        )
    
        if ims:
            ims = pd.read_excel(ims, usecols=[0,2,19,21])
            st.write(ims.head())
    
        ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
        ims = ims[ims['APD_Rodzaj_farmaceutyczny'].isin(['AP - Apteka','ME - Sklep zielarsko - medyczny','PU - Punkt apteczny'])]
    
        wynik_df_lr = pd.merge(pow_lr, ims, left_on='KLIENT', right_on='Klient', how='left')
        wynik_df_lg = pd.merge(pow_lg, ims, left_on='KLIENT', right_on='Klient', how='left')
    
        # Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
        wynik_df_lr = wynik_df_lr[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
        wynik_df_lg = wynik_df_lg[['KLIENT','APD_kod_SAP_apteki', 'pakiet']]
    
        #to są kody SAP
        wynik_df1_lr = wynik_df_lr.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
        wynik_df1_lr = wynik_df1_lr[['Kod klienta','max_percent']]

        wynik_df1_lg = wynik_df_lg.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
        wynik_df1_lg = wynik_df1_lg[['Kod klienta','pakiet']]

        #wynik_df1
    
        #to są kody powiazan
        wynik_df2_lr = wynik_df_lr.rename(columns={'KLIENT': 'Kod klienta'})
        wynik_df2_lr = wynik_df2_lr[['Kod klienta','max_percent']]

        wynik_df2_lg = wynik_df_lg.rename(columns={'KLIENT': 'Kod klienta'})
        wynik_df2_lg = wynik_df2_lg[['Kod klienta','pakiet']]

        #wynik_df2

        #POŁĄCZYĆ wynik_df z standard_ost
        polaczone_lr = pd.concat([stand_lr, wynik_df1_lr, wynik_df2_lr], axis = 0)

        polaczone_lg = pd.concat([stand_lg, wynik_df1_lg, wynik_df2_lg], axis = 0)
  
        posortowane_lr = polaczone_lr.sort_values(by='max_percent', ascending=False)

        ostatecznie_lr = posortowane_lr.drop_duplicates(subset='Kod klienta')
        ostatecznie_lr = ostatecznie_lr[ostatecznie_lr['max_percent'] != 0]


        ostatecznie_lg = polaczone_lg.drop_duplicates(subset=['Kod klienta', 'pakiet'])

        # ostatecznie_lg
        
        st.write('Jeśli to pierwszy monitoring, pobierz ten plik, jeśli nie, wrzuć plik z poprzedniego monitoringu i NIE POBIERAJ TEGO PLIKU')
        excel_file = io.BytesIO()

        with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
        # Jeśli dane BRAZOFLAMIN istnieją, zapisz je w odpowiednim arkuszu
            if 'ostatecznie_lr' in locals():
                ostatecznie_lr.to_excel(writer, index=False, sheet_name='Promocje_rabat')

            if 'ostatecznie_lg' in locals():
                ostatecznie_lg.to_excel(writer, index=False, sheet_name='Promocje_gratis')

        excel_file.seek(0)  # Resetowanie wskaźnika do początku pliku

         # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Pobierz, jeśli to pierwszy monitoring',
            data=excel_file,
            file_name='czy_dodac.xlsx',
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    
        # Plik z poprzedniego monitoringu
        poprzedni = st.file_uploader(
            label="Wrzuć plik z poprzedniego monitoringu"
        )
    
        if poprzedni:
            xls = pd.ExcelFile(poprzedni)  # Pobranie pliku z arkuszami
    
        # Wczytanie danych z odpowiednich arkuszy
        if 'Promocje_rabat' in xls.sheet_names:
            poprzedni_lr = pd.read_excel(poprzedni, sheet_name='Promocje_rabat')
            st.write('Poprzedni monitoring - Promocje_rabat:')
            st.write(poprzedni_lr.head())

        if 'Promocje_gratis' in xls.sheet_names:
            poprzedni_lg = pd.read_excel(poprzedni, sheet_name='Promocje_gratis')
            st.write('Poprzedni monitoring - Promocje_gratis :')
            st.write(poprzedni_lg.head())

        # Przetwarzanie 
        if 'ostatecznie_lr' in locals() and 'poprzedni_lr' in locals():
            poprzedni_lr = poprzedni_lr.rename(columns={'max_percent': 'old_percent'})
            result_lr = ostatecznie_lr.merge(poprzedni_lr[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
            result_lr['old_percent'] = result_lr['old_percent'].fillna(0)
            result_lr['Czy dodać'] = result_lr.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)

        if 'ostatecznie_lg' in locals() and 'poprzedni_lg' in locals():
            # Zmień nazwę kolumny 'pakiet' na 'old_pakiet' w poprzedni_lg
            # poprzedni_lg = poprzedni_lg.rename(columns={'pakiet': 'old_pakiet'})
            # Dodaj poprzedni_lg na dole ostatecznie_lg
            result_lg = pd.concat([ostatecznie_lg, poprzedni_lg], ignore_index=True)
            # Usuń duplikaty na podstawie kluczowych kolumn (zachowując pierwsze wystąpienie)
            result_lg = result_lg.drop_duplicates(subset=['Kod klienta', 'pakiet'], keep='first')
            # Oznacz nowe wiersze (takie, które nie były w poprzedni_lg)
            result_lg['Czy dodać'] = result_lg.apply(lambda row: 'DODAJ' if row['Kod klienta'] not in poprzedni_lg['Kod klienta'].values 
                                                     or row['pakiet'] not in poprzedni_lg['pakiet'].values else '', axis=1)


        # Zapisywanie plików do Excela
        excel_file1 = io.BytesIO()
        with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
            if 'result_lr' in locals():
                result_lr.to_excel(writer, index=False, sheet_name='Promocje_rabat')

            if 'result_lg' in locals():
                result_lg.to_excel(writer, index=False, sheet_name='Promocje_gratis')


        excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

        # Definiowanie nazwy pliku
        nazwa_pliku = f"Helituspan_{dzisiejsza_data}.xlsx"
        # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Kliknij aby pobrać plik z kodami, które kody należy dodać',
            data=excel_file1,
            file_name=nazwa_pliku,
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

        result_lr = result_lr.drop(columns=['old_percent', 'Czy dodać'])
        result_lg = result_lg.drop(columns=['Czy dodać'])
        # result_lg = result_lg.drop(columns=['old_pakiet', 'Czy dodać'])

        st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')

        # Tworzenie pliku Excel w pamięci
        excel_file2 = io.BytesIO()
    
        # Zapis do pliku Excel w pamięci
        with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
            result_lr.to_excel(writer, index=False, sheet_name='Promocje_rabat')
            result_lg.to_excel(writer, index=False, sheet_name='Promocje_gratis')


        # Resetowanie wskaźnika do początku pliku
        excel_file2.seek(0) 
    
        # Definiowanie nazwy pliku
        nazwa_pliku = f"FM_HELITUSPAN_{dzisiejsza_data}.xlsx"
    
        # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Pobierz nowy plik FORMUŁA MAX',
            data=excel_file2,
            file_name=nazwa_pliku,
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )



################################################### Synosept ###################################################
if sekcja == 'Synosept':
    st.write(tabs_font_css, unsafe_allow_html=True)

    df = st.file_uploader(
        label="Wrzuć plik Cykl - Synosept"
    )
    
    if df:
        # Pobieramy listę dostępnych arkuszy
        xls = pd.ExcelFile(df)
        
        # Sprawdzamy, które arkusze są dostępne i wczytujemy odpowiednie dane
        if 'Promocje_rabat' in xls.sheet_names:
            Lr = pd.read_excel(df, sheet_name='Promocje_rabat', skiprows=13, usecols=[1, 2, 10])
            st.write("Dane z arkusza Promocje_rabat:")
            st.write(Lr.head())


        # Sprawdzamy, które arkusze są dostępne i wczytujemy odpowiednie dane
        if 'Promocje_gratis' in xls.sheet_names:
            Lg = pd.read_excel(df, sheet_name='Promocje_gratis', skiprows=13, usecols=[2, 3, 10])
            st.write("Dane z arkusza Promocje_gratis:")
            st.write(Lg.head())



        #usuń braki danych z Kod klienta
        Lr = Lr.dropna(subset=['KLIENT']) 
        Lg = Lg.dropna(subset=['KLIENT']) 

        Lg = Lg[~Lg['PAKIET'].str.lower().str.contains('brak')]

        # klient na całkowite
        Lr['KLIENT'] = Lr['KLIENT'].astype(int)
        Lg['KLIENT'] = Lg['KLIENT'].astype(int)



        Lr.columns=['KLIENT','Kod klienta','rabat']
 
        
        # Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnach '12' lub '14' jest słowo 'powiązanie'
        Lr['SIECIOWY'] = Lr.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['rabat']).lower() else '', axis=1)
        Lg['SIECIOWY'] = Lg.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['PAKIET']).lower() else '', axis=1)

        Lr['rabat_percent'] = Lr['rabat'].apply(extract_percentage)

        Lg['pakiet'] = Lg['PAKIET'].apply(extract_numbers_as_text)
        #Lg

        # na zmiennoprzecinkowe
        Lr['rabat_percent'] = Lr['rabat_percent'].apply(percentage_to_float)
    
        # Dodaj nową kolumnę 'max_percent'
        Lr1 = Lr[Lr['SIECIOWY'] == 'SIECIOWY']
        Lr2 = Lr[Lr['SIECIOWY'] != 'SIECIOWY']
        Lr1['max_percent'] = Lr1[['rabat_percent']].max(axis=1)
        Lr2['max_percent'] = Lr2[['rabat_percent']].max(axis=1)
        
        ###### 1 to SIECIOWI, 2 to punkt dostaw
        Lr1 = Lr1[['KLIENT','Kod klienta','max_percent']]
        Lr2 = Lr2[['Kod klienta','max_percent']]


        Lg1 = Lg[Lg['SIECIOWY'] == 'SIECIOWY']
        Lg2 = Lg[Lg['SIECIOWY'] != 'SIECIOWY']

        
        #### p
        Lg1 = Lg1[['KLIENT','Kod klienta','pakiet']]
        Lg2 = Lg2[['Kod klienta','pakiet']]
        
        stand_lr = Lr2
        pow_lr = Lr1

        stand_lg = Lg2
        pow_lg = Lg1
        
        #TERAZ IMS
        ims = st.file_uploader(
            label = "Wrzuć plik ims_nhd"
        )
    
        if ims:
            ims = pd.read_excel(ims, usecols=[0,2,19,21])
            st.write(ims.head())
    
        ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
        ims = ims[ims['APD_Rodzaj_farmaceutyczny'].isin(['AP - Apteka','ME - Sklep zielarsko - medyczny','PU - Punkt apteczny'])]
    
        wynik_df_lr = pd.merge(pow_lr, ims, left_on='KLIENT', right_on='Klient', how='left')
        wynik_df_lg = pd.merge(pow_lg, ims, left_on='KLIENT', right_on='Klient', how='left')
    
        # Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
        wynik_df_lr = wynik_df_lr[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
        wynik_df_lg = wynik_df_lg[['KLIENT','APD_kod_SAP_apteki', 'pakiet']]
    
        #to są kody SAP
        wynik_df1_lr = wynik_df_lr.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
        wynik_df1_lr = wynik_df1_lr[['Kod klienta','max_percent']]

        wynik_df1_lg = wynik_df_lg.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
        wynik_df1_lg = wynik_df1_lg[['Kod klienta','pakiet']]

        #wynik_df1
    
        #to są kody powiazan
        wynik_df2_lr = wynik_df_lr.rename(columns={'KLIENT': 'Kod klienta'})
        wynik_df2_lr = wynik_df2_lr[['Kod klienta','max_percent']]

        wynik_df2_lg = wynik_df_lg.rename(columns={'KLIENT': 'Kod klienta'})
        wynik_df2_lg = wynik_df2_lg[['Kod klienta','pakiet']]

        #wynik_df2

        #POŁĄCZYĆ wynik_df z standard_ost
        polaczone_lr = pd.concat([stand_lr, wynik_df1_lr, wynik_df2_lr], axis = 0)

        polaczone_lg = pd.concat([stand_lg, wynik_df1_lg, wynik_df2_lg], axis = 0)
  
        posortowane_lr = polaczone_lr.sort_values(by='max_percent', ascending=False)

        ostatecznie_lr = posortowane_lr.drop_duplicates(subset='Kod klienta')
        ostatecznie_lr = ostatecznie_lr[ostatecznie_lr['max_percent'] != 0]


        ostatecznie_lg = polaczone_lg.drop_duplicates(subset=['Kod klienta', 'pakiet'])

        # ostatecznie_lg
        
        st.write('Jeśli to pierwszy monitoring, pobierz ten plik, jeśli nie, wrzuć plik z poprzedniego monitoringu i NIE POBIERAJ TEGO PLIKU')
        excel_file = io.BytesIO()

        with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
        # Jeśli dane BRAZOFLAMIN istnieją, zapisz je w odpowiednim arkuszu
            if 'ostatecznie_lr' in locals():
                ostatecznie_lr.to_excel(writer, index=False, sheet_name='Promocje_rabat')

            if 'ostatecznie_lg' in locals():
                ostatecznie_lg.to_excel(writer, index=False, sheet_name='Promocje_gratis')

        excel_file.seek(0)  # Resetowanie wskaźnika do początku pliku

         # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Pobierz, jeśli to pierwszy monitoring',
            data=excel_file,
            file_name='czy_dodac.xlsx',
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    
        # Plik z poprzedniego monitoringu
        poprzedni = st.file_uploader(
            label="Wrzuć plik z poprzedniego monitoringu"
        )
    
        if poprzedni:
            xls = pd.ExcelFile(poprzedni)  # Pobranie pliku z arkuszami
    
        # Wczytanie danych z odpowiednich arkuszy
        if 'Promocje_rabat' in xls.sheet_names:
            poprzedni_lr = pd.read_excel(poprzedni, sheet_name='Promocje_rabat')
            st.write('Poprzedni monitoring - Promocje_rabat:')
            st.write(poprzedni_lr.head())

        if 'Promocje_gratis' in xls.sheet_names:
            poprzedni_lg = pd.read_excel(poprzedni, sheet_name='Promocje_gratis')
            st.write('Poprzedni monitoring - Promocje_gratis :')
            st.write(poprzedni_lg.head())

        # Przetwarzanie 
        if 'ostatecznie_lr' in locals() and 'poprzedni_lr' in locals():
            poprzedni_lr = poprzedni_lr.rename(columns={'max_percent': 'old_percent'})
            result_lr = ostatecznie_lr.merge(poprzedni_lr[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
            result_lr['old_percent'] = result_lr['old_percent'].fillna(0)
            result_lr['Czy dodać'] = result_lr.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)

        if 'ostatecznie_lg' in locals() and 'poprzedni_lg' in locals():
            # Zmień nazwę kolumny 'pakiet' na 'old_pakiet' w poprzedni_lg
            # poprzedni_lg = poprzedni_lg.rename(columns={'pakiet': 'old_pakiet'})
            # Dodaj poprzedni_lg na dole ostatecznie_lg
            result_lg = pd.concat([ostatecznie_lg, poprzedni_lg], ignore_index=True)
            # Usuń duplikaty na podstawie kluczowych kolumn (zachowując pierwsze wystąpienie)
            result_lg = result_lg.drop_duplicates(subset=['Kod klienta', 'pakiet'], keep='first')
            # Oznacz nowe wiersze (takie, które nie były w poprzedni_lg)
            result_lg['Czy dodać'] = result_lg.apply(lambda row: 'DODAJ' if row['Kod klienta'] not in poprzedni_lg['Kod klienta'].values 
                                                     or row['pakiet'] not in poprzedni_lg['pakiet'].values else '', axis=1)


        # Zapisywanie plików do Excela
        excel_file1 = io.BytesIO()
        with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
            if 'result_lr' in locals():
                result_lr.to_excel(writer, index=False, sheet_name='Promocje_rabat')

            if 'result_lg' in locals():
                result_lg.to_excel(writer, index=False, sheet_name='Promocje_gratis')


        excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

        # Definiowanie nazwy pliku
        nazwa_pliku = f"SYNOSEPT_{dzisiejsza_data}.xlsx"
        # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Kliknij aby pobrać plik z kodami, które kody należy dodać',
            data=excel_file1,
            file_name=nazwa_pliku,
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

        result_lr = result_lr.drop(columns=['old_percent', 'Czy dodać'])
        result_lg = result_lg.drop(columns=['Czy dodać'])
        # result_lg = result_lg.drop(columns=['old_pakiet', 'Czy dodać'])

        st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')

        # Tworzenie pliku Excel w pamięci
        excel_file2 = io.BytesIO()
    
        # Zapis do pliku Excel w pamięci
        with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
            result_lr.to_excel(writer, index=False, sheet_name='Promocje_rabat')
            result_lg.to_excel(writer, index=False, sheet_name='Promocje_gratis')


        # Resetowanie wskaźnika do początku pliku
        excel_file2.seek(0) 
    
        # Definiowanie nazwy pliku
        nazwa_pliku = f"FM_SYNOSEPT_{dzisiejsza_data}.xlsx"
    
        # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Pobierz nowy plik FORMUŁA MAX',
            data=excel_file2,
            file_name=nazwa_pliku,
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )


################################################### Meloxicam ###################################################
if sekcja == 'Meloxicam':
    st.write(tabs_font_css, unsafe_allow_html=True)

    df = st.file_uploader(
        label="Wrzuć plik Cykl - Meloxicam"
    )
    
    if df:
        # Pobieramy listę dostępnych arkuszy
        xls = pd.ExcelFile(df)
        
        # Sprawdzamy, które arkusze są dostępne i wczytujemy odpowiednie dane
        if 'Promocje_rabat' in xls.sheet_names:
            Lr = pd.read_excel(df, sheet_name='Promocje_rabat', skiprows=14, usecols=[1, 2, 11])
            st.write("Dane z arkusza Promocje_rabat:")
            st.write(Lr.head())


        # Sprawdzamy, które arkusze są dostępne i wczytujemy odpowiednie dane
        if 'Promocje_gratis 116878' in xls.sheet_names:
            Lg = pd.read_excel(df, sheet_name='Promocje_gratis 116878', skiprows=14, usecols=[2, 3, 10])
            st.write("Dane z arkusza Promocje_gratis 116878:")
            st.write(Lg.head())

            # Sprawdzamy, które arkusze są dostępne i wczytujemy odpowiednie dane
        if 'Promocje_gratis 116929' in xls.sheet_names:
            Lc = pd.read_excel(df, sheet_name='Promocje_gratis 116929', skiprows=14, usecols=[2, 3, 10])
            st.write("Dane z arkusza Promocje_gratis 116929:")
            st.write(Lc.head())



        #usuń braki danych z Kod klienta
        Lr = Lr.dropna(subset=['KLIENT']) 
        Lg = Lg.dropna(subset=['KLIENT']) 
        Lc = Lc.dropna(subset=['KLIENT'])

        Lg = Lg[~Lg['PAKIET'].str.lower().str.contains('brak')]
        Lc = Lc[~Lc['PAKIET'].str.lower().str.contains('brak')]

        # klient na całkowite
        Lr['KLIENT'] = Lr['KLIENT'].astype(int)
        Lg['KLIENT'] = Lg['KLIENT'].astype(int)
        Lc['KLIENT'] = Lc['KLIENT'].astype(int)



        Lr.columns=['KLIENT','Kod klienta','rabat']
 
        
        # Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnach '12' lub '14' jest słowo 'powiązanie'
        Lr['SIECIOWY'] = Lr.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['rabat']).lower() else '', axis=1)
        Lg['SIECIOWY'] = Lg.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['PAKIET']).lower() else '', axis=1)
        Lc['SIECIOWY'] = Lc.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['PAKIET']).lower() else '', axis=1)

        Lr['rabat_percent'] = Lr['rabat'].apply(extract_percentage)

        Lg['pakiet'] = Lg['PAKIET'].apply(extract_numbers_as_text)
        Lc['pakiet'] = Lc['PAKIET'].apply(extract_numbers_as_text)
        #Lg

        # na zmiennoprzecinkowe
        Lr['rabat_percent'] = Lr['rabat_percent'].apply(percentage_to_float)
    
        # Dodaj nową kolumnę 'max_percent'
        Lr1 = Lr[Lr['SIECIOWY'] == 'SIECIOWY']
        Lr2 = Lr[Lr['SIECIOWY'] != 'SIECIOWY']
        Lr1['max_percent'] = Lr1[['rabat_percent']].max(axis=1)
        Lr2['max_percent'] = Lr2[['rabat_percent']].max(axis=1)
        
        ###### 1 to SIECIOWI, 2 to punkt dostaw
        Lr1 = Lr1[['KLIENT','Kod klienta','max_percent']]
        Lr2 = Lr2[['Kod klienta','max_percent']]


        Lg1 = Lg[Lg['SIECIOWY'] == 'SIECIOWY']
        Lg2 = Lg[Lg['SIECIOWY'] != 'SIECIOWY']

        Lc1 = Lc[Lc['SIECIOWY'] == 'SIECIOWY']
        Lc2 = Lc[Lc['SIECIOWY'] != 'SIECIOWY']

        
        #### p
        Lg1 = Lg1[['KLIENT','Kod klienta','pakiet']]
        Lg2 = Lg2[['Kod klienta','pakiet']]

        Lc1 = Lc1[['KLIENT','Kod klienta','pakiet']]
        Lc2 = Lc2[['Kod klienta','pakiet']]
        
        stand_lr = Lr2
        pow_lr = Lr1

        stand_lg = Lg2
        pow_lg = Lg1

        stand_lc = Lc2
        pow_lc = Lc1
        
        #TERAZ IMS
        ims = st.file_uploader(
            label = "Wrzuć plik ims_nhd"
        )
    
        if ims:
            ims = pd.read_excel(ims, usecols=[0,2,19,21])
            st.write(ims.head())
    
        ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
        ims = ims[ims['APD_Rodzaj_farmaceutyczny'].isin(['AP - Apteka','ME - Sklep zielarsko - medyczny','PU - Punkt apteczny'])]
    
        wynik_df_lr = pd.merge(pow_lr, ims, left_on='KLIENT', right_on='Klient', how='left')
        wynik_df_lg = pd.merge(pow_lg, ims, left_on='KLIENT', right_on='Klient', how='left')
        wynik_df_lc = pd.merge(pow_lc, ims, left_on='KLIENT', right_on='Klient', how='left')
    
        # Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
        wynik_df_lr = wynik_df_lr[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
        wynik_df_lg = wynik_df_lg[['KLIENT','APD_kod_SAP_apteki', 'pakiet']]
        wynik_df_lc = wynik_df_lc[['KLIENT','APD_kod_SAP_apteki', 'pakiet']]
    
        #to są kody SAP
        wynik_df1_lr = wynik_df_lr.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
        wynik_df1_lr = wynik_df1_lr[['Kod klienta','max_percent']]

        wynik_df1_lg = wynik_df_lg.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
        wynik_df1_lg = wynik_df1_lg[['Kod klienta','pakiet']]

        wynik_df1_lc = wynik_df_lc.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
        wynik_df1_lc = wynik_df1_lc[['Kod klienta','pakiet']]

        #wynik_df1
    
        #to są kody powiazan
        wynik_df2_lr = wynik_df_lr.rename(columns={'KLIENT': 'Kod klienta'})
        wynik_df2_lr = wynik_df2_lr[['Kod klienta','max_percent']]

        wynik_df2_lg = wynik_df_lg.rename(columns={'KLIENT': 'Kod klienta'})
        wynik_df2_lg = wynik_df2_lg[['Kod klienta','pakiet']]

        wynik_df2_lc = wynik_df_lc.rename(columns={'KLIENT': 'Kod klienta'})
        wynik_df2_lc = wynik_df2_lc[['Kod klienta','pakiet']]

        #wynik_df2

        #POŁĄCZYĆ wynik_df z standard_ost
        polaczone_lr = pd.concat([stand_lr, wynik_df1_lr, wynik_df2_lr], axis = 0)

        polaczone_lg = pd.concat([stand_lg, wynik_df1_lg, wynik_df2_lg], axis = 0)

        polaczone_lc = pd.concat([stand_lc, wynik_df1_lc, wynik_df2_lc], axis = 0)
  
        posortowane_lr = polaczone_lr.sort_values(by='max_percent', ascending=False)

        ostatecznie_lr = posortowane_lr.drop_duplicates(subset='Kod klienta')
        ostatecznie_lr = ostatecznie_lr[ostatecznie_lr['max_percent'] != 0]


        ostatecznie_lg = polaczone_lg.drop_duplicates(subset=['Kod klienta', 'pakiet'])
        ostatecznie_lc = polaczone_lc.drop_duplicates(subset=['Kod klienta', 'pakiet'])

        # ostatecznie_lg
        
        st.write('Jeśli to pierwszy monitoring, pobierz ten plik, jeśli nie, wrzuć plik z poprzedniego monitoringu i NIE POBIERAJ TEGO PLIKU')
        excel_file = io.BytesIO()

        with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
        # Jeśli dane BRAZOFLAMIN istnieją, zapisz je w odpowiednim arkuszu
            if 'ostatecznie_lr' in locals():
                ostatecznie_lr.to_excel(writer, index=False, sheet_name='Promocje_rabat')

            if 'ostatecznie_lg' in locals():
                ostatecznie_lg.to_excel(writer, index=False, sheet_name='Promocje_gratis 116878')

            if 'ostatecznie_lc' in locals():
                ostatecznie_lc.to_excel(writer, index=False, sheet_name='Promocje_gratis 116929')

        excel_file.seek(0)  # Resetowanie wskaźnika do początku pliku

         # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Pobierz, jeśli to pierwszy monitoring',
            data=excel_file,
            file_name='czy_dodac.xlsx',
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    
        # Plik z poprzedniego monitoringu
        poprzedni = st.file_uploader(
            label="Wrzuć plik z poprzedniego monitoringu"
        )
    
        if poprzedni:
            xls = pd.ExcelFile(poprzedni)  # Pobranie pliku z arkuszami
    
        # Wczytanie danych z odpowiednich arkuszy
        if 'Promocje_rabat' in xls.sheet_names:
            poprzedni_lr = pd.read_excel(poprzedni, sheet_name='Promocje_rabat')
            st.write('Poprzedni monitoring - Promocje_rabat:')
            st.write(poprzedni_lr.head())

        if 'Promocje_gratis 116878' in xls.sheet_names:
            poprzedni_lg = pd.read_excel(poprzedni, sheet_name='Promocje_gratis 116878')
            st.write('Poprzedni monitoring - Promocje_gratis 116878:')
            st.write(poprzedni_lg.head())

        if 'Promocje_gratis 116929' in xls.sheet_names:
            poprzedni_lc = pd.read_excel(poprzedni, sheet_name='Promocje_gratis 116929')
            st.write('Poprzedni monitoring - Promocje_gratis 116929:')
            st.write(poprzedni_lc.head())

        # Przetwarzanie 
        if 'ostatecznie_lr' in locals() and 'poprzedni_lr' in locals():
            poprzedni_lr = poprzedni_lr.rename(columns={'max_percent': 'old_percent'})
            result_lr = ostatecznie_lr.merge(poprzedni_lr[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
            result_lr['old_percent'] = result_lr['old_percent'].fillna(0)
            result_lr['Czy dodać'] = result_lr.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)

        if 'ostatecznie_lg' in locals() and 'poprzedni_lg' in locals():
            # Zmień nazwę kolumny 'pakiet' na 'old_pakiet' w poprzedni_lg
            # poprzedni_lg = poprzedni_lg.rename(columns={'pakiet': 'old_pakiet'})
            # Dodaj poprzedni_lg na dole ostatecznie_lg
            result_lg = pd.concat([ostatecznie_lg, poprzedni_lg], ignore_index=True)
            # Usuń duplikaty na podstawie kluczowych kolumn (zachowując pierwsze wystąpienie)
            result_lg = result_lg.drop_duplicates(subset=['Kod klienta', 'pakiet'], keep='first')
            # Oznacz nowe wiersze (takie, które nie były w poprzedni_lg)
            result_lg['Czy dodać'] = result_lg.apply(lambda row: 'DODAJ' if row['Kod klienta'] not in poprzedni_lg['Kod klienta'].values 
                                                     or row['pakiet'] not in poprzedni_lg['pakiet'].values else '', axis=1)

        if 'ostatecznie_lc' in locals() and 'poprzedni_lc' in locals():
            # Zmień nazwę kolumny 'pakiet' na 'old_pakiet' w poprzedni_lg
            # poprzedni_lg = poprzedni_lg.rename(columns={'pakiet': 'old_pakiet'})
            # Dodaj poprzedni_lg na dole ostatecznie_lg
            result_lc = pd.concat([ostatecznie_lc, poprzedni_lc], ignore_index=True)
            # Usuń duplikaty na podstawie kluczowych kolumn (zachowując pierwsze wystąpienie)
            result_lc = result_lc.drop_duplicates(subset=['Kod klienta', 'pakiet'], keep='first')
            # Oznacz nowe wiersze (takie, które nie były w poprzedni_lg)
            result_lc['Czy dodać'] = result_lc.apply(lambda row: 'DODAJ' if row['Kod klienta'] not in poprzedni_lc['Kod klienta'].values 
                                                     or row['pakiet'] not in poprzedni_lc['pakiet'].values else '', axis=1)


        # Zapisywanie plików do Excela
        excel_file1 = io.BytesIO()
        with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
            if 'result_lr' in locals():
                result_lr.to_excel(writer, index=False, sheet_name='Promocje_rabat')

            if 'result_lg' in locals():
                result_lg.to_excel(writer, index=False, sheet_name='Promocje_gratis 116878')

            if 'result_lc' in locals():
                result_lc.to_excel(writer, index=False, sheet_name='Promocje_gratis 116929')



        excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

        # Definiowanie nazwy pliku
        nazwa_pliku = f"MELOXICAM_{dzisiejsza_data}.xlsx"
        # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Kliknij aby pobrać plik z kodami, które kody należy dodać',
            data=excel_file1,
            file_name=nazwa_pliku,
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

        result_lr = result_lr.drop(columns=['old_percent', 'Czy dodać'])
        result_lg = result_lg.drop(columns=['Czy dodać'])
        result_lc = result_lc.drop(columns=['Czy dodać'])
        # result_lg = result_lg.drop(columns=['old_pakiet', 'Czy dodać'])

        st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')

        # Tworzenie pliku Excel w pamięci
        excel_file2 = io.BytesIO()
    
        # Zapis do pliku Excel w pamięci
        with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
            result_lr.to_excel(writer, index=False, sheet_name='Promocje_rabat')
            result_lg.to_excel(writer, index=False, sheet_name='Promocje_gratis 116878')
            result_lc.to_excel(writer, index=False, sheet_name='Promocje_gratis 116929')


        # Resetowanie wskaźnika do początku pliku
        excel_file2.seek(0) 
    
        # Definiowanie nazwy pliku
        nazwa_pliku = f"FM_MELOXICAM_{dzisiejsza_data}.xlsx"
    
        # Umożliwienie pobrania pliku Excel
        st.download_button(
            label='Pobierz nowy plik FORMUŁA MAX',
            data=excel_file2,
            file_name=nazwa_pliku,
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )








############################################################################# Standy ################################################################
if sekcja == 'Standy':
    st.write(tabs_font_css, unsafe_allow_html=True)

    df = st.file_uploader(
        label = "Wrzuć plik Cykl - Standy"
    )
    if df:
        df = pd.read_excel(df, sheet_name = 'Rabat', skiprows = 16, usecols = [1,2,9])
        st.write(df.head())


    #usuń braki danych z Kod klienta
    df = df.dropna(subset=['Kod klienta'])

    # klient na całkowite
    df['KLIENT'] = df['KLIENT'].astype(int)
    df['Kod klienta'] = df['Kod klienta'].astype(int)

    # Zmiana nazw kolumn
    df = df.rename(columns={'0.16.2': '16'})

    #Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnach '12' lub '14' jest słowo 'powiązanie'
    df['SIECIOWY'] = df.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['16']).lower() else '', axis=1)

    #SPRAWDZENIE CZY DZIAŁA
    #df[df['SIECIOWY'] == 'SIECIOWY']
    #DZIAŁA :)

    
    # Zastosowanie funkcji do kolumn '12' i '14'
    df['16_percent'] = df['16'].apply(extract_percentage)


    # Konwersja kolumn '12_percent' i '14_percent' na liczby zmiennoprzecinkowe
    df['16_percent'] = df['16_percent'].apply(percentage_to_float)

    # Dodaj nową kolumnę 'max_percent' z maksymalnymi wartościami z kolumn '12_percent' i '14_percent'
    df['max_percent'] = df[['16_percent']].max(axis=1)

    # Wybierz wiersze, gdzie 'max_percent' nie jest równa 0
    filtered_df = df[df['max_percent'] != 0]

    standard = filtered_df[filtered_df['SIECIOWY'] != 'SIECIOWY']
    powiazanie = filtered_df[filtered_df['SIECIOWY'] == 'SIECIOWY']

    #len(standard), len(powiazanie), len(filtered_df)

    standard_ost = standard[['Kod klienta', 'max_percent']]

    powiazanie = powiazanie[['KLIENT','Kod klienta','max_percent']]


    #TERAZ IMS
    ims = st.file_uploader(
        label = "Wrzuć plik ims_nhd"
    )

    if ims:
        ims = pd.read_excel(ims, usecols=[0,2,19,21])
        st.write(ims.head())

    ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
    ims = ims[ims['APD_Rodzaj_farmaceutyczny'].isin(['AP - Apteka','ME - Sklep zielarsko - medyczny','PU - Punkt apteczny'])]

    wynik_df = pd.merge(powiazanie, ims, left_on='KLIENT', right_on='Klient', how='left')

    #Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
    wynik_df = wynik_df[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]


    #to są kody SAP
    wynik_df1 = wynik_df.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df1 = wynik_df1[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df2 = wynik_df.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df2 = wynik_df2[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone = pd.concat([standard_ost, wynik_df1, wynik_df2], axis = 0)
  
    posortowane = polaczone.sort_values(by='max_percent', ascending=False)

    ostatecznie = posortowane.drop_duplicates(subset='Kod klienta')


    st.write('Jeśli to pierwszy monitoring, pobierz ten plik, jeśli nie, wrzuć plik z poprzedniego monitoringu i NIE POBIERAJ TEGO PLIKU')
    excel_file = io.BytesIO()
    with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
        ostatecznie.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file.seek(0)  # Resetowanie wskaźnika do początku pliku

    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz, jeśli to pierwszy monitoring',
        data=excel_file,
        file_name='czy_dodac.xlsx',
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    #plik z poprzedniego monitoringu
    poprzedni = st.file_uploader(
        label = "Wrzuć plik z poprzedniego monitoringu"
    )

    if poprzedni:
        poprzedni = pd.read_excel(poprzedni)
        st.write(poprzedni.head())

    poprzedni = poprzedni.rename(columns={'max_percent': 'old_percent'})
    # Wykonanie left join, dodanie 'old_percent' do pliku 'ostatecznie'
    result = ostatecznie.merge(poprzedni[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
    result['old_percent'] = result['old_percent'].fillna(0)
    result['Czy dodać'] = result.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)
    st.write('Kliknij aby pobrać plik z kodami, które kody należy dodać')

    excel_file1 = io.BytesIO()
    with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku1 = f"STANDY_{dzisiejsza_data}.xlsx"
    #Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz',
        data=excel_file1,
        file_name=nazwa_pliku1,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    result = result.drop(columns=['old_percent', 'Czy dodać'])


    st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')
    excel_file2 = io.BytesIO()
    with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku = f"FM_STANDY_{dzisiejsza_data}.xlsx"
    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz nowy plik FORMUŁA MAX',
        data=excel_file2,
        file_name = nazwa_pliku,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )



############################################################################# Standy wrzesień-marzec################################################################
if sekcja == 'Standy wrzesień-marzec':
    st.write(tabs_font_css, unsafe_allow_html=True)

    df = st.file_uploader(
        label = "Wrzuć plik Cykl - Standy wrzesień-marzec"
    )
    if df:
        df = pd.read_excel(df, sheet_name = 'Rabat', skiprows = 16, usecols = [1,2,9])
        st.write(df.head())


    #usuń braki danych z Kod klienta
    df = df.dropna(subset=['Kod klienta'])

    # klient na całkowite
    df['KLIENT'] = df['KLIENT'].astype(int)
    df['Kod klienta'] = df['Kod klienta'].astype(int)

    # Zmiana nazw kolumn
    df = df.rename(columns={'0.16.2': '16'})

    #Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnach '12' lub '14' jest słowo 'powiązanie'
    df['SIECIOWY'] = df.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['16']).lower() else '', axis=1)

    #SPRAWDZENIE CZY DZIAŁA
    #df[df['SIECIOWY'] == 'SIECIOWY']
    #DZIAŁA :)

    
    # Zastosowanie funkcji do kolumn '12' i '14'
    df['16_percent'] = df['16'].apply(extract_percentage)


    # Konwersja kolumn '12_percent' i '14_percent' na liczby zmiennoprzecinkowe
    df['16_percent'] = df['16_percent'].apply(percentage_to_float)

    # Dodaj nową kolumnę 'max_percent' z maksymalnymi wartościami z kolumn '12_percent' i '14_percent'
    df['max_percent'] = df[['16_percent']].max(axis=1)

    # Wybierz wiersze, gdzie 'max_percent' nie jest równa 0
    filtered_df = df[df['max_percent'] != 0]

    standard = filtered_df[filtered_df['SIECIOWY'] != 'SIECIOWY']
    powiazanie = filtered_df[filtered_df['SIECIOWY'] == 'SIECIOWY']

    #len(standard), len(powiazanie), len(filtered_df)

    standard_ost = standard[['Kod klienta', 'max_percent']]

    powiazanie = powiazanie[['KLIENT','Kod klienta','max_percent']]


    #TERAZ IMS
    ims = st.file_uploader(
        label = "Wrzuć plik ims_nhd"
    )

    if ims:
        ims = pd.read_excel(ims, usecols=[0,2,19,21])
        st.write(ims.head())

    ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
    ims = ims[ims['APD_Rodzaj_farmaceutyczny'].isin(['AP - Apteka','ME - Sklep zielarsko - medyczny','PU - Punkt apteczny'])]

    wynik_df = pd.merge(powiazanie, ims, left_on='KLIENT', right_on='Klient', how='left')

    #Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
    wynik_df = wynik_df[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]


    #to są kody SAP
    wynik_df1 = wynik_df.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df1 = wynik_df1[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df2 = wynik_df.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df2 = wynik_df2[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone = pd.concat([standard_ost, wynik_df1, wynik_df2], axis = 0)
  
    posortowane = polaczone.sort_values(by='max_percent', ascending=False)

    ostatecznie = posortowane.drop_duplicates(subset='Kod klienta')


    st.write('Jeśli to pierwszy monitoring, pobierz ten plik, jeśli nie, wrzuć plik z poprzedniego monitoringu i NIE POBIERAJ TEGO PLIKU')
    excel_file = io.BytesIO()
    with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
        ostatecznie.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file.seek(0)  # Resetowanie wskaźnika do początku pliku

    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz, jeśli to pierwszy monitoring',
        data=excel_file,
        file_name='czy_dodac.xlsx',
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    #plik z poprzedniego monitoringu
    poprzedni = st.file_uploader(
        label = "Wrzuć plik z poprzedniego monitoringu"
    )

    if poprzedni:
        poprzedni = pd.read_excel(poprzedni)
        st.write(poprzedni.head())

    poprzedni = poprzedni.rename(columns={'max_percent': 'old_percent'})
    # Wykonanie left join, dodanie 'old_percent' do pliku 'ostatecznie'
    result = ostatecznie.merge(poprzedni[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
    result['old_percent'] = result['old_percent'].fillna(0)
    result['Czy dodać'] = result.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)
    st.write('Kliknij aby pobrać plik z kodami, które kody należy dodać')

    excel_file1 = io.BytesIO()
    with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku1 = f"STANDY_w-m_{dzisiejsza_data}.xlsx"
    #Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz',
        data=excel_file1,
        file_name=nazwa_pliku1,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    result = result.drop(columns=['old_percent', 'Czy dodać'])


    st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')
    excel_file2 = io.BytesIO()
    with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku = f"FM_STANDY_w-m_{dzisiejsza_data}.xlsx"
    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz nowy plik FORMUŁA MAX',
        data=excel_file2,
        file_name = nazwa_pliku,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )


        






    
    







        


















    
